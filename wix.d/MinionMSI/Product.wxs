<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">

  <Product
      Manufacturer = "SaltStack, Inc."
      Name         = "Salt Minion $(var.DisplayVersion)"
      Version      = "$(var.InternalVersion)"
      UpgradeCode  = "FC6FB3A2-65DE-41A9-AD91-D10A402BD641"
      Id           = "*"
      Language     = "1033">
    <Package InstallScope="perMachine"  InstallerVersion="405" Compressed="yes"/>

    <!-- Conditions for installation -->
    <Condition Message="Installation requires Windows 7/Server 2012. Found MsiNTProductType [MsiNTProductType], VersionNT [VersionNT]">
      Installed
      OR  (MsiNTProductType = 1) AND (VersionNT >= 601)
      OR  (MsiNTProductType = 2) AND (VersionNT >= 602)
      OR  (MsiNTProductType = 3) AND (VersionNT >= 602)
    </Condition>
    <Condition Message="Installation requires 125 MB RAM. Found [PhysicalMemory] MB">Installed OR (PhysicalMemory > 125)</Condition>

    <!-- ReadConfig_IMCAC must run immediately as Admin, the msi cannot elevate before deferred, so the user must be Admin -->
    <Condition Message="Installation requires Administrator privileges. Please open from an elevated command prompt.">Privileged</Condition>

    <Condition Message="Please rename MASTER_HOSTNAME to MASTER"           >Installed OR NOT MASTER_HOSTNAME     </Condition>
    <Condition Message="Please rename MINION_HOSTNAME to MINION_ID"        >Installed OR NOT MINION_HOSTNAME     </Condition>
    <Condition Message="Please rename START_MINION_SERVICE to START_MINION">Installed OR NOT START_MINION_SERVICE</Condition>

    <Condition Message='CONFIG_TYPE must not be "[CONFIG_TYPE]". Please use "Existing", "Custom" or "Default".'>
      Installed
      OR (CONFIG_TYPE = "Existing")
      OR (CONFIG_TYPE = "Custom")
      OR (CONFIG_TYPE = "Default")
    </Condition>
    <Condition Message='START_MINION must not be [START_MINION]. Please use 1 or "" (two double quotes).'>
      (START_MINION = 1) OR NOT START_MINION OR Installed
    </Condition>
    <Condition Message='NSIS Salt Minion unexpected uninstall instruction [NSIS_UNINSTALLSTRING]'>
      NOT Installed AND (NSIS_UNINSTALLSTRING >> "uninst.exe" OR NOT NSIS_UNINSTALLSTRING) OR Installed
    </Condition>
    <Condition Message='NSIS Salt Minion unexpected version [NSIS_DISPLAYVERSION]'>
      <![CDATA[NOT Installed AND ((NSIS_DISPLAYVERSION << "v")
                               OR (NSIS_DISPLAYVERSION << "20")
                               OR (NSIS_DISPLAYVERSION << "30") OR NOT NSIS_DISPLAYVERSION) OR Installed]]>
    </Condition>

    <!-- Testing if the salt-minion service start after NSIS uninst.exe /S  -->
    <Condition Message='Please manually uninstall Salt Minion [NSIS_DISPLAYVERSION] or set testing_salt_msi_uninstalls_exe=1 for testing to uninstall the Nullsoft-exe instelled Salt Minion'>
      NOT (NSIS_UNINSTALLSTRING >> "uninst.exe") OR %testing_salt_msi_uninstalls_exe
    </Condition>

    <!--
        Properties unset by default:
           MASTER
           MASTER_KEY
           MINION_ID
           MINION_CONFIG
           CUSTOM_CONFIG
           REMOVE_CONFIG
    -->
    <Property Id="CONFIG_TYPE"              Value="Existing"             />
    <Property Id="START_MINION"             Value="1"                    />
    <Property Id="ARPHELPLINK"              Value="https://support.saltstack.com"/>
    <Property Id="ARPURLINFOABOUT"          Value="https://saltstack.com"/>
    <Property Id="ARPURLUPDATEINFO"         Value="https://docs.saltstack.com/en/latest/topics/releases/"/>
    <Property Id="ROOTDRIVE"                Value="C:\"/>
    <Property Id="ARPPRODUCTICON"           Value="icon.ico" />
    <Property Id="MSIRESTARTMANAGERCONTROL" Value="Disable"/>
    <Property Id="MsiLogging"               Value="v"/>
    <Property Id="MSIUSEREALADMINDETECTION" Value="1"/>
    <Property Id="WIXUI_INSTALLDIR"         Value="INSTALLFOLDER"/>

    <!-- Search previous NSIS installation.
         Assume NSIS always (32 and 64 bit Salt-minion) writes into the 32bit WoW registry -->
    <Property           Id="NSIS_UNINSTALLSTRING">
        <RegistrySearch Id="NSIS_UNINSTALLSTRING"
            Root="HKLM" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Salt Minion" Name="UninstallString" Type="raw" Win64="no" />
    </Property>
        <Property       Id="NSIS_DISPLAYVERSION">
        <RegistrySearch Id="NSIS_DISPLAYVERSION"
            Root="HKLM" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Salt Minion" Name="DisplayVersion" Type="raw" Win64="no" />
    </Property>
    <!-- Combine both properties to decide how to uninstall.
      uninst.exe /S was implemented in v2017.5   Later displayversion lost the leading v.
     Set properties and combine them. These 2 steps require sequencing.
         Assume RegistrySearch takes place in AppSearch.
         Assume AppSearch is sequenced before LaunchConditions.  -->
    <SetProperty Id="nsis_exe"              Before="LaunchConditions" Value="1">NSIS_UNINSTALLSTRING >> "uninst.exe"</SetProperty>
    <SetProperty Id="nsis_ge_v2017.5"       Before="LaunchConditions" Value="1">NSIS_DISPLAYVERSION >= "v2017.5"</SetProperty>
    <SetProperty Id="nsis_ge_2018"          Before="LaunchConditions" Value="1"><![CDATA[NSIS_DISPLAYVERSION >= "2018" AND NOT NSIS_DISPLAYVERSION << "v"]]></SetProperty>
    <SetProperty Id="nsis_uninst_waits_not"  After="LaunchConditions" Value="1">nsis_exe AND NOT (nsis_ge_v2017.5 OR nsis_ge_2018)</SetProperty>
    <SetProperty Id="nsis_uninst_waits_yes"  After="LaunchConditions" Value="1">nsis_exe AND     (nsis_ge_v2017.5 OR nsis_ge_2018)</SetProperty>

    <!-- Properties for Custom actions  -->
    <!-- Assume NSIS installs into fixed path C:\salt  only.  -->
    <CustomAction Id="uninst_NSIS1_DECAH"      Property="uninst_NSIS1_DECAX"     Value='"C:\salt\uninst.exe" /S _?=C:\salt'/>
    <CustomAction Id="uninst_NSIS1_DECAX"      DllEntry="WixQuietExec"         Execute="deferred"  Return="check"   BinaryKey="WixCA" Impersonate="no"/>
    <CustomAction Id="uninst_NSIS2_DECAH"      Property="uninst_NSIS2_DECAX"     Value='"C:\salt\uninst.exe" /S'/>
    <CustomAction Id="uninst_NSIS2_DECAX"      DllEntry="WixQuietExec"         Execute="deferred"  Return="check"   BinaryKey="WixCA" Impersonate="no"/>

    <!-- Preparation when NSIS not only installs into fixed path C:\salt.    Remove uninst.exe from NSIS_UNINSTALLSTRING -->
    <CustomAction Id="get_NSIS_uninstdir_IMCAX" Script="vbscript">
      Session.Property("nsis_uninstalldir") = Replace(Session.Property("NSIS_UNINSTALLSTRING"),"uninst.exe","")
    </CustomAction>
    <!-- Deferreds cannot access Session.Property but conditionally remove folders with lifetime data -->
    <CustomAction Id="delete_config_DECAX" Script="vbscript">
Dim fso
Set fso = CreateObject("Scripting.FileSystemObject")
if fso.FolderExists("c:\salt") then
  fso.DeleteFolder "c:\salt"
end if
    </CustomAction>
    <CustomAction Id="delete_VARFOLDER_DECAX" Script="vbscript">
Dim fso
Set fso = CreateObject("Scripting.FileSystemObject")
if fso.FolderExists("c:\salt\var") then
  fso.DeleteFolder "c:\salt\var"
end if
    </CustomAction>

    <InstallUISequence>         <!-- * * * * * * * * * * * * * * * * * * Sequence with GUI * * * * * * * * * * * * * * * * *  -->
      <Custom Action="get_NSIS_uninstdir_IMCAX"    Before='LaunchConditions'         >NSIS_UNINSTALLSTRING</Custom>
      <Custom Action='ReadConfig_IMCAC'            Before='MigrateFeatureStates'     >NOT Installed</Custom>

      <LaunchConditions After="AppSearch" /> <!-- Benefit is unclear. Was used when detecting MFC. Probably not needed. -->
    </InstallUISequence>

    <InstallExecuteSequence>     <!-- * * * * * * * * * * * * * * * * *  Sequence without GUI (silent, headless)  * * * * * *  -->
      <Custom Action='ReadConfig_IMCAC'            Before='MigrateFeatureStates'    >NOT Installed</Custom>
      <Custom Action='del_NSIS_DECAC'               After='InstallInitialize'       >nsis_uninst_waits_not</Custom>
      <Custom Action="uninst_NSIS1_DECAH"          Before='uninst_NSIS1_DECAX'     />
      <Custom Action="uninst_NSIS1_DECAX"          Before='uninst_NSIS2_DECAX'      >nsis_uninst_waits_yes</Custom>
      <Custom Action="uninst_NSIS2_DECAH"          Before='uninst_NSIS2_DECAX'     />
      <Custom Action="uninst_NSIS2_DECAX"          Before='ProcessComponents'       >nsis_uninst_waits_yes</Custom>

      <Custom Action='delete_config_DECAX'         After='InstallFinalize'          >(REMOVE ~= "ALL") and REMOVE_CONFIG</Custom>
      <Custom Action='delete_VARFOLDER_DECAX'      After='InstallFinalize'          >REMOVE ~= "ALL"</Custom>

      <Custom Action='WriteConfig_CADH'
              Before='WriteConfig_DECAC'                                            >NOT Installed</Custom>
      <Custom Action='WriteConfig_DECAC'           After='WriteIniValues'           >NOT Installed</Custom>

      <!-- Optionally start the service  -->
      <StartServices Sequence="5900"><![CDATA[START_MINION = "1"]]></StartServices>
    </InstallExecuteSequence>   <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  -->


    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />

    <DirectoryRef Id="TARGETDIR">
    <!--Visual C++ runtimes depend on the target platform -->
    <?if $(var.TargetPlatform)=amd64 ?>
      <Merge Id="MSM_VC120_CRT" SourceFile="c:\salt_msi_resources\Microsoft_VC120_CRT_x64.msm" DiskId="1" Language="0"/>
      <Merge Id="MSM_VC140_CRT" SourceFile="c:\salt_msi_resources\Microsoft_VC140_CRT_x64.msm" DiskId="1" Language="0"/>
    <?else ?>
      <Merge Id="MSM_VC120_CRT" SourceFile="c:\salt_msi_resources\Microsoft_VC120_CRT_x86.msm" DiskId="1" Language="0"/>
      <Merge Id="MSM_VC140_CRT" SourceFile="c:\salt_msi_resources\Microsoft_VC140_CRT_x86.msm" DiskId="1" Language="0"/>
    <?endif ?>
    </DirectoryRef>

    <Feature Id="ProductFeature" Title="Minion" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
      <ComponentRef      Id="RemoveFolderEx_BINFOLDER_Component" /> <!-- On uninstall and upgrade -->

      <Feature Id="VC120" Title="VC++ 2013" AllowAdvertise="no" Display="hidden"><MergeRef Id="MSM_VC120_CRT"/></Feature>
      <Feature Id="VC140" Title="VC++ 2015" AllowAdvertise="no" Display="hidden"><MergeRef Id="MSM_VC140_CRT"/></Feature>
    </Feature>

    <Icon Id="icon.ico" SourceFile="salt.ico" />
    <WixVariable Id="WixUILicenseRtf" Value="LICENSE.rtf" />


    <WixVariable Id="WixUIBannerBmp" Value="imgTop.jpg" />
    <WixVariable Id="WixUIDialogBmp" Value="imgLeft.png" />

    <UIRef Id="ProductUI" />                             <!-- Includes ProductUI.wxs in this directory -->

    <MediaTemplate EmbedCab="yes" CompressionLevel="low" /> <!-- Do not create cab files -->
  </Product>


  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir">      <!-- Outmost directory must be exactly this. Ramirez ch 1 p 25 -->
      <Directory Id="INSTALLFOLDER" Name="salt" >
        <Directory Id="CONFFOLDER" Name="conf" >
          <Directory Id="MINION_D_CONF_FOLDER"  Name="minion.d" />
          <Directory Id="SALT_CONF_PKI_FOLDER" Name="pki" >
            <Directory Id="SALT_CONF_PKI_MINION_FOLDER" Name="minion" />
          </Directory>
        </Directory>
        <Directory Id="BINFOLDER"  Name="bin" />      <!-- For RemoveFolderEX remember pattern -->
        <Directory Id="VARFOLDER"  Name="var" />      <!-- For delete_VARFOLDER_DECAX -->
      </Directory>
    </Directory>

    <!-- Set permissions of the install folder with WixQueryOsWellKnownSID -->
    <PropertyRef Id="WIX_ACCOUNT_ADMINISTRATORS" />
    <Component Id="InstallfolderPermissions"  Directory="INSTALLFOLDER" Guid="B30E119F-0286-4453-8AB7-C6E916FA2843">
      <CreateFolder>
        <Permission User="[WIX_ACCOUNT_ADMINISTRATORS]" GenericAll="yes" TakeOwnership="yes" />
      </CreateFolder>
    </Component>
  </Fragment>

  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <ComponentGroupRef Id="dist"    />       <!-- Includes dist-amd64.wxs in this directory -->
      <ComponentGroupRef Id="service" />       <!-- Includes service.wxs in this directory -->
      <ComponentRef Id="InstallfolderPermissions" />
    </ComponentGroup>
  </Fragment>


  <!--  Remove 'lifetime' data on uninstall. Lifetime data does not originate from the installer. -->
  <!--  Wix uninstall include upgrades. Cannot be used for lifetime data that must persist on upgrade. -->
  <Fragment Id="RemoveFolderEx_Fragment">
    <?define RegDir="SOFTWARE\SaltStack\Salt-Minion"?>
    <?define RegVal_BINFOLDER="RememberForRemoveFolderExBINFOLDER"?>

    <Property Id="BINFOLDER" Secure="yes">
      <RegistrySearch Root="HKLM" Key="$(var.RegDir)" Type="raw"
                Id="BINFOLDER_REGSEARCH" Name="$(var.RegVal_BINFOLDER)" />
    </Property>

    <DirectoryRef Id='BINFOLDER'>
      <Component Id="RemoveFolderEx_BINFOLDER_Component" Guid="b36009bc-ada0-45dc-afda-68c07d137f38">
        <RegistryValue Root="HKLM" Key="$(var.RegDir)" Name="$(var.RegVal_BINFOLDER)"
                Type="string" Value="[BINFOLDER]" KeyPath="yes"/>
        <CreateFolder Directory="BINFOLDER"/>
        <util:RemoveFolderEx Property="BINFOLDER" On="uninstall"/> <!-- Includes upgrade -->
        <RemoveFolder Id="BINFOLDER" On="uninstall"/>
      </Component>
    </DirectoryRef>
  </Fragment>
</Wix>
